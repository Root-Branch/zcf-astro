---
const {
  scrollbar_color = "ds-red-500",
  scrollbar_background_color = "ds-blue-900",
  container_class = "px-4",
  is_cards_left,
} = Astro.props;
---

<!-- Custom Horizontal Scrollbar -->
<div
  class={`${container_class} custom-scrollbar-container`}
  data-cards-left={is_cards_left}
>
  <div
    class={`h-4 mt-4 bg-${scrollbar_background_color} rounded-full relative`}
  >
    <div
      class={`custom-scrollbar-thumb absolute h-4 bg-${scrollbar_color} cursor-pointer rounded-full`}
    >
    </div>
  </div>
</div>

<style>
  /* Custom scrollbar thumb styling */
  .custom-scrollbar-thumb {
    width: 20%;
    left: 0;
    transition: left 0.1s ease;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Wait a bit for everything to initialize
    setTimeout(() => {
      const containers = document.querySelectorAll(".carousel-container");

      containers.forEach((container) => {
        const closestSection = container.closest("section");
        if (!closestSection) return;

        const scrollbarContainer = closestSection.querySelector(
          ".custom-scrollbar-container"
        );
        if (!scrollbarContainer) return;

        // Get is_cards_left value from data attribute
        // @ts-ignore
        const isCardsLeft =
          scrollbarContainer.getAttribute("data-cards-left") === "true";

        const thumb = closestSection.querySelector(".custom-scrollbar-thumb");
        const track = closestSection.querySelector(
          ".custom-scrollbar-container > div"
        );

        if (!container || !thumb || !track) return;

        function updateScrollPosition() {
          if (isCardsLeft) {
            container.scrollLeft =
              container.scrollWidth - container.clientWidth;
          } else {
            container.scrollLeft = 0;
          }
        }

        function initScrollbar() {
          const visibleRatio = container.clientWidth / container.scrollWidth;
          // @ts-ignore
          thumb.style.width = `${Math.max(visibleRatio * 100, 10)}%`;

          updateScrollPosition();
          updateThumbPosition();
        }

        function updateThumbPosition() {
          const scrollRatio =
            container.scrollLeft /
            (container.scrollWidth - container.clientWidth);
          const maxLeft = track.clientWidth - thumb.clientWidth;
          // @ts-ignore
          thumb.style.left = `${scrollRatio * maxLeft}px`;
        }

        function setupDragging() {
          let isDragging = false;
          let startX, startLeft;

          // Mouse events for desktop
          thumb.addEventListener("mousedown", (e) => {
            isDragging = true;
            // @ts-ignore
            startX = e.clientX;
            // @ts-ignore
            startLeft = parseInt(getComputedStyle(thumb).left);
            e.preventDefault();
          });

          document.addEventListener("mousemove", (e) => {
            if (!isDragging) return;

            // @ts-ignore
            const dx = e.clientX - startX;
            const maxLeft = track.clientWidth - thumb.clientWidth;
            const newLeft = Math.max(0, Math.min(startLeft + dx, maxLeft));

            // @ts-ignore
            thumb.style.left = `${newLeft}px`;
            container.scrollLeft =
              (newLeft / maxLeft) *
              (container.scrollWidth - container.clientWidth);
          });

          document.addEventListener("mouseup", () => {
            isDragging = false;
          });

          // Touch events for mobile
          thumb.addEventListener("touchstart", (e) => {
            isDragging = true;
            // @ts-ignore
            startX = e.touches[0].clientX;
            // @ts-ignore
            startLeft = parseInt(getComputedStyle(thumb).left);
            e.preventDefault();
          }, { passive: false });

          document.addEventListener("touchmove", (e) => {
            if (!isDragging) return;

            // @ts-ignore
            const dx = e.touches[0].clientX - startX;
            const maxLeft = track.clientWidth - thumb.clientWidth;
            const newLeft = Math.max(0, Math.min(startLeft + dx, maxLeft));

            // @ts-ignore
            thumb.style.left = `${newLeft}px`;
            container.scrollLeft =
              (newLeft / maxLeft) *
              (container.scrollWidth - container.clientWidth);
          }, { passive: false });

          document.addEventListener("touchend", () => {
            isDragging = false;
          });

          // Make track clickable/tappable
          track.addEventListener("click", (e) => {
            if (e.target === thumb) return;

            // @ts-ignore
            const clickX = e.clientX - track.getBoundingClientRect().left;
            const thumbCenter = thumb.clientWidth / 2;
            const newLeft = Math.max(
              0,
              Math.min(
                clickX - thumbCenter,
                track.clientWidth - thumb.clientWidth
              )
            );

            // @ts-ignore
            thumb.style.left = `${newLeft}px`;
            container.scrollLeft =
              (newLeft / (track.clientWidth - thumb.clientWidth)) *
              (container.scrollWidth - container.clientWidth);
          });

          // Handle track touch tap on mobile
          track.addEventListener("touchend", (e) => {
            if (e.target === thumb) return;
            
            // Cast the event to TouchEvent to access touchend properties
            // @ts-ignore
            const touchEvent = e as TouchEvent;
            
            // Prevent other handlers if this was a tap (not a scroll)
            if (startX && Math.abs(touchEvent.changedTouches[0].clientX - startX) < 10) {
              // @ts-ignore
              const clickX = touchEvent.changedTouches[0].clientX - track.getBoundingClientRect().left;
              const thumbCenter = thumb.clientWidth / 2;
              const newLeft = Math.max(
                0,
                Math.min(
                  clickX - thumbCenter,
                  track.clientWidth - thumb.clientWidth
                )
              );

              // @ts-ignore
              thumb.style.left = `${newLeft}px`;
              container.scrollLeft =
                (newLeft / (track.clientWidth - thumb.clientWidth)) *
                (container.scrollWidth - container.clientWidth);
            }
          });
        }

        initScrollbar();
        setTimeout(updateScrollPosition, 100);
        setupDragging();

        container.addEventListener("scroll", updateThumbPosition);
        window.addEventListener("resize", initScrollbar);
      });
    }, 0);
  });
</script>
