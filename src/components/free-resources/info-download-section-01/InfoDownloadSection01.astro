---
import { renderRichText } from "@storyblok/astro";
import { convertToWebP } from "../../../utils/imageConvert";
import DownloadForm from "../download-form/DownloadForm.astro";

const {
  title,
  title_font,
  subtitle,
  description,
  image,
  download_form = [],
  styling = [],
  is_download_form_right = false,
} = Astro.props;

// Extract styling properties
const padding_top = styling?.[0]?.padding_top || "md";
const padding_bottom = styling?.[0]?.padding_bottom || "md";
const padding_left = styling?.[0]?.padding_left || "xs";
const padding_right = styling?.[0]?.padding_right || "xs";
const mobile_padding_top = styling?.[0]?.mobile_padding_top || "xs";
const mobile_padding_bottom = styling?.[0]?.mobile_padding_bottom || "xs";
const mobile_padding_left = styling?.[0]?.mobile_padding_left || "xxs";
const mobile_padding_right = styling?.[0]?.mobile_padding_right || "xxs";
const background_color = styling?.[0]?.background_color || "";
const max_width = styling?.[0]?.max_width || "1520";

// Parse rich text if needed
const parsedDescription = description ? renderRichText(description) : "";

// Create CSS classes
const padding_classes = `
  pt-${mobile_padding_top} pb-${mobile_padding_bottom}
  pl-${mobile_padding_left} pr-${mobile_padding_right}
  lg:pt-${padding_top} lg:pb-${padding_bottom}
  lg:pl-${padding_left} lg:pr-${padding_right}
`;

const bg_color_class = background_color ? `bg-${background_color}` : "";
const max_width_class = max_width ? `max-w-[${max_width}px]` : "";
---

<section class={`relative ${padding_classes} ${bg_color_class}`}>
  <div class={`mx-auto ${max_width_class}`}>
    <div class="grid grid-cols-1 lg:grid-cols-2 lg:gap-16 items-center">
      <!-- Left Column: Content and Form -->
      <div class="order-2 lg:order-1">
        {subtitle && <p class="text-ds-red-500 ds-h4 mb-2">{subtitle}</p>}
        {
          title && (
            <p class={`${title_font ? `${title_font}` : "ds-h3"} mb-4`}>
              {title}
            </p>
          )
        }

        {
          parsedDescription && (
            <div class="mb-8 lg:mb-24 ds-p-2" set:html={parsedDescription} />
          )
        }

        {
          image?.filename && (
            <div class="relative overflow-hidden block lg:hidden mb-8">
              <img
                src={convertToWebP(image.filename)}
                alt={image.alt || "Resource preview"}
                class="w-full h-full object-cover"
              />
            </div>
          )
        }

        <!-- Download Form Component (Mobile: always show here / Desktop: show if not on right) -->
        {
          download_form && download_form.length > 0 && (
            <div class={`block ${!is_download_form_right ? "lg:block" : "lg:hidden"}`}>
              <DownloadForm {...download_form[0]} />
            </div>
          )
        }
      </div>

      <!-- Right Column: Image -->
      <div class="order-1 lg:order-2">
        <!-- Download Form Component (Desktop only: show if set to right) -->
        {
          download_form && download_form.length > 0 && is_download_form_right && (
            <div class="hidden lg:block">
              <DownloadForm {...download_form[0]} />
            </div>
          )
        }
        {
          image?.filename && (
            <div class="relative overflow-hidden hidden lg:block">
              <img
                src={convertToWebP(image.filename)}
                alt={image.alt || "Resource preview"}
                class="w-full h-full object-cover"
              />
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
