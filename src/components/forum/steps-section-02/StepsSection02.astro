---
import StepCard from "./StepCard.astro";
import { Image } from "astro:assets";
import arrowLeft from "../../../assets/arrow-left.png";
import arrowRight from "../../../assets/arrow-right.png";

const { title, description, step_cards, styling } = Astro.props;

// Extract styling properties
const padding_top = styling?.[0]?.padding_top || "";
const padding_bottom = styling?.[0]?.padding_bottom || "";
const padding_left = styling?.[0]?.padding_left || "";
const padding_right = styling?.[0]?.padding_right || "";
const mobile_padding_top = styling?.[0]?.mobile_padding_top || "";
const mobile_padding_bottom = styling?.[0]?.mobile_padding_bottom || "";
const mobile_padding_left = styling?.[0]?.mobile_padding_left || "";
const mobile_padding_right = styling?.[0]?.mobile_padding_right || "";
const background_color = styling?.[0]?.background_color || "";
const max_width = styling?.[0]?.max_width || "";

// Create CSS classes
const padding_classes = `
  ${mobile_padding_top ? `pt-${mobile_padding_top}` : ""}
  ${mobile_padding_bottom ? `pb-${mobile_padding_bottom}` : ""}
  ${mobile_padding_left ? `pl-${mobile_padding_left}` : ""}
  ${mobile_padding_right ? `pr-${mobile_padding_right}` : ""}
  ${padding_top ? `lg:pt-${padding_top}` : ""}
  ${padding_bottom ? `lg:pb-${padding_bottom}` : ""}
  ${padding_left ? `lg:pl-${padding_left}` : ""}
  ${padding_right ? `lg:pr-${padding_right}` : ""}
`;

const bg_color_class = background_color ? `bg-${background_color}` : "";
const max_width_class = max_width ? `max-w-[${max_width}px]` : "";
---

<section class=`mx-auto ${padding_classes} ${bg_color_class} ${max_width_class}`>
  <div class="mx-auto">
    {/* Header */}
    <div class="text-center mb-4 lg:mb-12">
      <h2 class="ds-h2 lg:ds-h3 mb-8">{title}</h2>
      <p class="ds-p-2 mb-8 lg:mb-[88px]">{description}</p>
    </div>

    {/* Mobile Carousel (visible on small screens) */}
    <div class="xl:hidden">
      <div class="swiper stepsSwiper">
        <div class="swiper-wrapper">
          {
            step_cards.map((card, index) => (
              <div class="swiper-slide step-card-container" data-index={index}>
                <StepCard card={card} isHighlighted={index === 0} />
              </div>
            ))
          }
        </div>
      </div>

      <!-- Navigation buttons (outside the swiper container) -->
      <div class="flex justify-center gap-12 mt-4">
        <div
          class="swiper-button-prev after:content-none static transform-none mx-0 my-0 w-auto h-auto"
        >
          <Image src={arrowLeft} alt="Previous" height={27} />
        </div>
        <div
          class="swiper-button-next after:content-none static transform-none mx-0 my-0 w-auto h-auto"
        >
          <Image src={arrowRight} alt="Next" height={27} />
        </div>
      </div>
    </div>

    {/* Desktop Grid (visible on large screens and up) */}
    <div
      class="hidden xl:grid grid-cols-1 xl:grid-cols-2 2xl:grid-cols-4 gap-6 mx-auto min-h-[650px]"
      id="steps-desktop-grid"
    >
      {
        step_cards.map((card, index) => (
          <div class="step-card-container self-center" data-index={index}>
            <StepCard card={card} isHighlighted={index === 0} />
          </div>
        ))
      }
    </div>
  </div>
</section>

<script>
  import { Swiper } from "swiper";
  import { Navigation } from "swiper/modules";
  import "swiper/css";
  import "swiper/css/navigation";

  document.addEventListener("DOMContentLoaded", () => {
    // Initialize Swiper
    const swiper = new Swiper(".stepsSwiper", {
      modules: [Navigation],
      slidesPerView: 1,
      spaceBetween: 30,
      loop: true,
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev",
      },
    });

    // Handle desktop card highlighting with transitions
    const desktopCards = document.querySelectorAll(
      "#steps-desktop-grid .step-card-container"
    );
    let activeCardIndex = 0;

    // Apply transition to all card elements for smooth animation
    desktopCards.forEach((container) => {
      const card = container.querySelector('div[class*="bg-ds-"]');
      if (card) {
        // Add faster transition for smoother animation
        card.style.transition = "all 0.25s ease-in-out";
      }
    });

    function updateCardHighlighting(highlightIndex) {
      desktopCards.forEach((container, idx) => {
        const card = container.querySelector('div[class*="bg-ds-"]');
        if (!card) return;

        if (idx === highlightIndex) {
          card.classList.add("lg:bg-ds-teal-500", "xl:min-h-[450px]", "2xl:min-h-[650px]");
          card.classList.remove("xl:min-h-[400px]", "2xl:min-h-[580px]");
        } else {
          card.classList.remove("lg:bg-ds-teal-500", "xl:min-h-[450px]", "2xl:min-h-[650px]");
          card.classList.add("xl:min-h-[400px]", "2xl:min-h-[580px]");
        }
      });
    }

    // Add hover events to cards
    desktopCards.forEach((cardContainer, index) => {
      cardContainer.addEventListener("mouseenter", () => {
        updateCardHighlighting(index);
        activeCardIndex = index;
      });

      cardContainer.addEventListener("mouseleave", () => {
        updateCardHighlighting(activeCardIndex);
      });
    });
  });
</script>

<style>
  /* Override Swiper's default button positioning */
  .swiper-button-next,
  .swiper-button-prev {
    position: static !important;
    margin: 0 !important;
  }

  .swiper-button-next::after,
  .swiper-button-prev::after {
    content: "" !important;
  }
</style>
