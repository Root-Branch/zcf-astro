---
import { renderRichText } from "@storyblok/astro";
import ImageCard from "./ImageCard.astro";
import VideoCard from "./VideoCard.astro";
import CustomScrollbar from "../../common/CustomScrollbar.astro";
import DownloadCard from "../../free-resources/double-download-cards-section-01/DownloadCard.astro";

const {
  title,
  title_color,
  description,
  description_color,
  cards,
  styling,
  subtitle,
  subtitle_color,
  scrollbar_color,
  scrollbar_background_color,
  is_cards_left = true,
} = Astro.props;

const renderedDescription = description || "";

const padding_top = styling?.[0]?.padding_top || "xs";
const padding_bottom = styling?.[0]?.padding_bottom || "xs";
const padding_left = styling?.[0]?.padding_left || "xs";
const padding_right = styling?.[0]?.padding_right || "xs";
const mobile_padding_top = styling?.[0]?.mobile_padding_top || "xs";
const mobile_padding_bottom = styling?.[0]?.mobile_padding_bottom || "xs";
const mobile_padding_left = styling?.[0]?.mobile_padding_left || "xs";
const mobile_padding_right = styling?.[0]?.mobile_padding_right || "xs";
const background_color = styling?.[0]?.background_color || "";

const padding_top_class = `lg:pt-${padding_top}`;
const padding_bottom_class = `lg:pb-${padding_bottom}`;
const padding_left_class = `lg:pl-${padding_left}`;
const padding_right_class = `lg:pr-${padding_right}`;
const mobile_padding_top_class = `pt-${mobile_padding_top}`;
const mobile_padding_bottom_class = `pb-${mobile_padding_bottom}`;
const mobile_padding_left_class = `pl-${mobile_padding_left}`;
const mobile_padding_right_class = `pr-${mobile_padding_right}`;

const max_width_class = `max-w-[${styling?.[0]?.max_width}px]` || "";
const bg_color_class = background_color ? `bg-${background_color}` : "";
const scrollbar_color_val = scrollbar_color || "ds-teal-500";
const scrollbar_background_color_val = scrollbar_background_color || "ds-white";

// Determine content alignment based on cards position
const content_alignment = is_cards_left ? "lg:text-left" : "lg:text-right";
const content_padding = is_cards_left ? "lg:pl-16" : "lg:pr-16";
---

<section
  class={`${mobile_padding_top_class} ${mobile_padding_bottom_class} 
  ${padding_top_class} ${padding_bottom_class} 
  ${bg_color_class} ${padding_left_class} ${padding_right_class} 
  ${mobile_padding_left_class} ${mobile_padding_right_class} ${max_width_class}`}
>
  <div class="relative overflow-hidden">
    <div
      class={`flex flex-col ${is_cards_left ? "lg:flex-row-reverse" : "lg:flex-row"}`}
    >
      <div
        class={`w-full lg:w-[30%] px-4 ${content_padding} text-ds-white text-center ${content_alignment} mb-24 lg:mb-0`}
      >
        <p
          class={`ds-h4 ${subtitle_color ? `text-${subtitle_color}` : "text-ds-teal-500"} mb-4 lg:mb-8`}
        >
          {subtitle}
        </p>
        <p
          class={`ds-h2 ${title_color ? `text-${title_color}` : "text-ds-white"} lg:ds-h3 mb-4 lg:mb-8`}
        >
          {title}
        </p>
        <p
          class={`ds-p-2 ${description_color ? `text-${description_color}` : "text-ds-white"}`}
        >
          {renderedDescription}
        </p>
      </div>

      <!-- Cards Carousel -->
      <div class="w-full lg:w-[70%] overflow-x-auto pb-8 carousel-container">
        <div
          class="flex space-x-12 ml-[-50px] lg:ml-[-100px] pl-[50px] lg:pl-[100px] pr-4"
        >
          {
            cards.map((card) =>
              // Check if card has download_form
              card.download_form ? (
                <DownloadCard
                  title={card.title}
                  description={card.description}
                  image={card.image}
                  download_form={card.download_form}
                  is_desktop={true}
                />
              ) : card.video ? (
                <VideoCard
                  title={card.title}
                  description={card.description}
                  video={card.video}
                  cta_button={card.cta_button}
                />
              ) : (
                <ImageCard
                  title={card.title}
                  description={card.description}
                  image={card.image}
                  cta_button={card.cta_button}
                />
              )
            )
          }
        </div>
      </div>
    </div>

    <!-- Use the Custom Scrollbar Component -->
    <CustomScrollbar
      scrollbar_color={scrollbar_color_val}
      scrollbar_background_color={scrollbar_background_color_val}
      container_class={`px-4 lg:w-[70%] ${is_cards_left ? "lg:pl-8 lg:pr-0" : "lg:ml-auto lg:pr-8 lg:pl-0"}`}
      is_cards_left={is_cards_left}
    />
  </div>
</section>

<style>
  /* Hide default scrollbar */
  .carousel-container::-webkit-scrollbar {
    display: none;
  }

  .carousel-container {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .card {
    width: calc(100vw - 32px);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.querySelector(".carousel-container");
    const thumb = document.querySelector(".custom-scrollbar-thumb");
    const track = document.querySelector(".custom-scrollbar-container > div");

    if (!container || !thumb || !track) return;

    function initScrollbar() {
      const visibleRatio = container.clientWidth / container.scrollWidth;
      thumb.style.width = `${Math.max(visibleRatio * 100, 10)}%`;

      container.scrollLeft = 0;
      updateThumbPosition();
    }

    function updateThumbPosition() {
      const scrollRatio =
        container.scrollLeft / (container.scrollWidth - container.clientWidth);
      const maxLeft = track.clientWidth - thumb.clientWidth;
      thumb.style.left = `${scrollRatio * maxLeft}px`;
    }

    function setupDragging() {
      let isDragging = false;
      let startX, startLeft;

      thumb.addEventListener("mousedown", (e) => {
        isDragging = true;
        startX = e.clientX;
        startLeft = parseInt(getComputedStyle(thumb).left);
        e.preventDefault();
      });

      document.addEventListener("mousemove", (e) => {
        if (!isDragging) return;

        const dx = e.clientX - startX;
        const maxLeft = track.clientWidth - thumb.clientWidth;
        const newLeft = Math.max(0, Math.min(startLeft + dx, maxLeft));

        thumb.style.left = `${newLeft}px`;
        container.scrollLeft =
          (newLeft / maxLeft) * (container.scrollWidth - container.clientWidth);
      });

      document.addEventListener("mouseup", () => {
        isDragging = false;
      });

      track.addEventListener("click", (e) => {
        if (e.target === thumb) return;

        const clickX = e.clientX - track.getBoundingClientRect().left;
        const thumbCenter = thumb.clientWidth / 2;
        const newLeft = Math.max(
          0,
          Math.min(clickX - thumbCenter, track.clientWidth - thumb.clientWidth)
        );

        thumb.style.left = `${newLeft}px`;
        container.scrollLeft =
          (newLeft / (track.clientWidth - thumb.clientWidth)) *
          (container.scrollWidth - container.clientWidth);
      });
    }

    initScrollbar();
    container.addEventListener("scroll", updateThumbPosition);
    window.addEventListener("resize", initScrollbar);
    setupDragging();
  });
</script>
